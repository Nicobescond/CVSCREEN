# Analyse de CV - GFSI (version compl√®te avec options avanc√©es)
# Nom du fichier : analyse_cv_gfsi.py

import streamlit as st
import PyPDF2
import json
from datetime import datetime
from pathlib import Path
import groq

# Configuration Streamlit
st.set_page_config(page_title="Analyse de CV GFSI", layout="wide")
st.title("üìÑ Analyse automatis√©e de CV - Auditeurs GFSI")

# Cl√© API GROQ
api_key = st.text_input("üîë Cl√© API Groq :", type="password")
if not api_key:
    st.warning("Veuillez saisir une cl√© API valide.")
    st.stop()

client = groq.Client(api_key=api_key)

# Chargement des r√©f√©rentiels
@st.cache_data
def load_referentials():
    referentials = {}
    ref_dir = Path("referentiels")
    for file in ref_dir.glob("*.json"):
        with open(file, encoding="utf-8") as f:
            referentials[file.stem] = json.load(f)
    return referentials

referentials = load_referentials()
if not referentials:
    st.error("Aucun r√©f√©rentiel trouv√© dans le dossier 'referentiels'.")
    st.stop()

# S√©lection du r√©f√©rentiel
ref_name = st.selectbox("üìö S√©lectionnez un r√©f√©rentiel GFSI :", list(referentials.keys()))
selected_ref = referentials[ref_name]

# Mod√®le IA
model = st.selectbox("üß† Choisissez le mod√®le IA :", [
    "llama3-8b-8192",
    "llama-3.3-70b-versatile",
    "llama-3.1-8b-instant",
    "kmi-k2-70b",
    "qwen3-72b"
])

# T√©l√©versement du CV
uploaded_file = st.file_uploader("üìÑ Chargez un CV (PDF uniquement)", type=["pdf"])

if uploaded_file:
    try:
        reader = PyPDF2.PdfReader(uploaded_file)
        cv_text = " ".join([page.extract_text() or "" for page in reader.pages])
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier : {e}")
        st.stop()

    # Options d'affichage avanc√©es
    debug = st.checkbox("Afficher les donn√©es brutes (debug)")

    # Construction du prompt
    prompt = f"""
Tu es un expert en recrutement GFSI.
Analyse ce CV √† la lumi√®re du r√©f√©rentiel suivant :

{json.dumps(selected_ref, indent=2)}

Voici le contenu du CV :
{cv_text}

Retourne un JSON structur√© avec :
1. Pour chaque exigence : conforme / non conforme / partiellement conforme, score de confiance, justification
2. Une synth√®se globale du profil
3. Des recommandations ou relances √©ventuelles
"""

    if st.button("üîç Lancer l'analyse IA"):
        with st.spinner("Analyse du CV en cours..."):
            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}]
                )
                result = response.choices[0].message.content.strip()

                st.success("‚úÖ Analyse termin√©e")
                st.subheader("üìä R√©sultats JSON")
                st.code(result, language="json")

                # T√©l√©chargement du rapport
                filename = f"analyse_{ref_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                st.download_button("üíæ T√©l√©charger le rapport JSON", result, file_name=filename, mime="application/json")

            except Exception as e:
                st.error(f"Erreur pendant l'analyse IA : {e}")

# Administration (mode d√©veloppeur)
with st.expander("üîê Mode administration - Cr√©ation de r√©f√©rentiels IA"):
    admin_pwd = st.text_input("Mot de passe admin :", type="password")
    if admin_pwd == "admin123":  # √† s√©curiser dans la vraie vie
        texte = st.text_area("üìã Collez ici les exigences du nouveau r√©f√©rentiel :")
        if st.button("ü§ñ G√©n√©rer r√©f√©rentiel JSON"):
            prompt_ref = f"Cr√©e un JSON structur√© pour ce r√©f√©rentiel GFSI :\n{texte}"
            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt_ref}]
                )
                json_ref = response.choices[0].message.content.strip()
                st.code(json_ref, language="json")
            except Exception as e:
                st.error(f"Erreur IA : {e}")
    else:
        st.info("Mot de passe requis pour acc√©der √† ce module.")
